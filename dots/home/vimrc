" ───────── Plugins (vim-plug) ─────────
call plug#begin()
Plug 'morhetz/gruvbox'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'prettier/vim-prettier', { 'do': 'npm install' }

Plug 'lervag/vimtex'
" Language plugins (keep only what you use)
Plug 'pangloss/vim-javascript'
Plug 'jparise/vim-graphql'
Plug 'evanleck/vim-svelte'
" Optional: which-key (can remove if you don't use it)
" Plug 'liuchengxu/vim-which-key'
call plug#end()

" ───────── Core UI ─────────
set background=dark
colorscheme gruvbox
if has('termguicolors') | set termguicolors | endif
set number
set cursorline
set signcolumn=yes
set cmdheight=2

" ───────── Files/encoding/newlines ─────────
set encoding=utf-8
set fileencoding=utf-8
set eol
set fixendofline

" ───────── Tabs/indent ─────────
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab

" ───────── Splits ─────────
set splitright
set splitbelow

" ───────── Search/grep ─────────
set hlsearch
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m
endif

" ───────── Performance/UX ─────────
set lazyredraw
set updatetime=300
set shortmess+=c

" ───────── Clipboard (optional) ─────────
if has('clipboard')
  set clipboard=unnamedplus
endif

" ───────── Undo/backup/swap ─────────
if has('persistent_undo')
  set undofile
  set undodir^=~/.vim/undo//
endif
set backup
set backupdir^=~/.vim/backup//
set directory^=~/.vim/swap//

" ───────── FZF mappings ─────────
nnoremap <expr> <C-p> exists('*fzf#vim#gitfiles') && !empty(system('git rev-parse --is-inside-work-tree 2>/dev/null')) ? ':GFiles<CR>' : ':Files<CR>'

" ───────── Prettier ─────────
let g:prettier#quickfix_enabled = 0
let g:prettier#autoformat_require_pragma = 0
augroup PrettierAuto
  autocmd!
  autocmd BufWritePre *.css,*.svelte,*.pcss,*.html,*.ts,*.js,*.json PrettierAsync
augroup END

" ───────── CoC (minimal, you already use these) ─────────
" Use K to show documentation
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if index(['vim','help'], &filetype) >= 0
    execute 'h '.expand('<cword>')
  elseif coc#rpc#ready()
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)

" Diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Format
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Statusline integration
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" ───────── VimTeX (mac-only viewer) ─────────
let g:vimtex_compiler_latexmk = {'build_dir' : 'build'}
if has('mac')
  let g:vimtex_view_method = 'skim'
  let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
  let g:vimtex_view_general_options = '-r @line @pdf @tex'
endif